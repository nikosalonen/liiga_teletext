# Gemini Project Guide

This document provides a comprehensive guide for the Gemini agent to understand and work with this project effectively.

## Project Overview

This project is a Rust terminal application that displays Finnish ice hockey league (Liiga) results in an authentic YLE Teksti-TV (teletext) style interface. The application fetches real-time game data from the Liiga API and presents it with nostalgic teletext aesthetics, including proper color schemes, pagination, and interactive navigation.

### Key Features
- **Authentic teletext UI**: Mimics YLE Teksti-TV channel 221 appearance with proper colors and layout
- **Real-time data**: Fetches live game data with automatic refresh (every minute for ongoing games, hourly for completed games)
- **Multiple tournament support**: Regular season, playoffs, playout, qualifications, and practice games
- **Interactive navigation**: Arrow key navigation between pages, manual refresh with 'r' key
- **Comprehensive CLI**: Rich command-line interface with clap, supporting various display and configuration options
- **Robust configuration**: TOML-based config with platform-specific storage locations
- **Advanced logging**: Structured logging with file rotation and configurable locations
- **Version management**: Automatic update checking and semantic versioning
- **Error handling**: Comprehensive error types with proper context and user-friendly messages

## Architecture Overview

The application follows a modular architecture with clear separation of concerns:

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   CLI/Main      │───▶│   Data Fetcher   │───▶│  Teletext UI    │
│  (main.rs)      │    │ (data_fetcher/)  │    │(teletext_ui.rs) │
└─────────────────┘    └──────────────────┘    └─────────────────┘
         │                        │                       │
         ▼                        ▼                       ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Config        │    │     Models       │    │   Rendering     │
│  (config.rs)    │    │   (models.rs)    │    │   & Events      │
└─────────────────┘    └──────────────────┘    └─────────────────┘
         │
         ▼
┌─────────────────┐
│  Error Handling │
│   (error.rs)    │
└─────────────────┘
```

## Project Structure Details

### Core Modules

#### `src/main.rs` (832 lines)
- **Purpose**: Application entry point and interactive UI event loop
- **Key Components**:
  - CLI argument parsing with clap
  - Interactive mode with crossterm for terminal manipulation
  - Non-interactive mode for scripting
  - Version checking and update notifications
  - Automatic refresh logic based on game states
- **Important Functions**:
  - `main()`: Entry point with comprehensive error handling
  - `run_interactive_ui()`: Main event loop for interactive mode
  - `is_noninteractive_mode()`: Determines execution mode based on CLI args
  - `create_page()` & `create_future_games_page()`: Page factory functions

#### `src/lib.rs` (58 lines)
- **Purpose**: Library interface and public API exports
- **Key Exports**: Common types, constants, and convenience re-exports
- **Usage**: Provides clean API for both binary and library usage

#### `src/config.rs` (405 lines)
- **Purpose**: Configuration management with TOML serialization
- **Key Features**:
  - Platform-specific config directories using `dirs` crate
  - Automatic https:// prefix handling for API domains
  - Custom log file path management
  - Comprehensive error handling for file operations
- **Best Practices**:
  - Always use `Config::load()` for initialization
  - Validate API domains have proper protocol prefixes
  - Handle missing config files gracefully with user prompts

#### `src/error.rs` (52 lines)
- **Purpose**: Centralized error handling with thiserror
- **Error Types**:
  - `ApiFetch`: Network and HTTP errors
  - `ApiParse`: JSON deserialization errors
  - `Config`: Configuration-related errors
  - `DateTimeParse`: Time parsing errors
  - `LogSetup`: Logging initialization errors
- **Best Practice**: Always use context-specific error constructors

#### `src/teletext_ui.rs` (1431 lines)
- **Purpose**: Teletext-style UI rendering and page management
- **Key Components**:
  - `TeletextPage`: Main page container with pagination
  - `TeletextRow`: Individual content row types
  - `GameResultData`: Game information display object
  - Color constants matching authentic teletext appearance
- **Rendering Features**:
  - Automatic pagination based on terminal height
  - Goal scorer information with timestamps
  - Video link support (toggleable)
  - Season countdown for off-season periods
  - Responsive layout adjustments

### Data Fetcher Module (`src/data_fetcher/`)

#### `api.rs` (1588 lines)
- **Purpose**: HTTP client and API integration
- **Key Functions**:
  - `fetch_liiga_data()`: Main data fetching entry point
  - `fetch_schedule_games()`: Schedule API calls
  - `fetch_game_details()`: Detailed game information
  - `fetch_regular_season_start_date()`: Season timing
- **Error Handling**: Comprehensive retry logic and timeout handling
- **Caching**: Built-in response caching with time-based invalidation

#### `models.rs` (280 lines)
- **Purpose**: Data structures and API response models
- **Key Structures**:
  - `GameData`: Processed game information
  - `ScheduleGame` & `DetailedGame`: Raw API response models
  - `GoalEvent` & `GoalEventData`: Goal information
  - `Player`: Player information
- **Traits**: `HasTeams` and `HasGoalEvents` for polymorphic game handling

#### `processors.rs` (228 lines)
- **Purpose**: Data transformation and business logic
- **Key Functions**:
  - Game state determination (ongoing, finished, scheduled)
  - Score formatting with overtime/shootout indicators
  - Goal event processing and player name resolution
  - Tournament type classification

#### `cache.rs` (177 lines)
- **Purpose**: HTTP response caching with time-based expiration
- **Features**:
  - In-memory caching with LRU eviction
  - Configurable TTL per cache entry
  - Thread-safe access with Arc<Mutex<>>

## Development Best Practices

### Code Style and Patterns

1. **Error Handling**:
   ```rust
   // Always use ? operator for propagating errors
   let config = Config::load().await?;

   // Use context-specific error types
   return Err(AppError::config_error("Invalid API domain"));
   ```

2. **Async/Await Usage**:
   ```rust
   // Use tokio::main for async main functions
   #[tokio::main]
   async fn main() -> Result<(), AppError> {
       // Implementation
   }

   // Always handle async errors properly
   match fetch_data().await {
       Ok(data) => process_data(data),
       Err(e) => log_error_and_continue(e),
   }
   ```

3. **Configuration Management**:
   ```rust
   // Always load config at application start
   let config = Config::load().await?;

   // Use config validation
   if !config.api_domain.starts_with("https://") {
       return Err(AppError::config_error("API domain must use HTTPS"));
   }
   ```

4. **CI Testing Best Practices**:
   ```rust
   // Always test with all features enabled
   // Run: cargo test --all-features

   // Use platform-agnostic date/time handling
   let utc_time = chrono::Utc::now();
   let local_time = utc_time.with_timezone(&chrono::Local);

   // Handle file operations gracefully
   let config_dir = dirs::config_dir()
       .ok_or_else(|| AppError::config_error("Could not determine config directory"))?;

   // Test error scenarios explicitly
   #[tokio::test]
   async fn test_error_handling() {
       let result = function_that_might_fail().await;
       assert!(result.is_err());
       assert!(matches!(result.unwrap_err(), AppError::SomeErrorType));
   }
   ```

## CRITICAL: Clippy Warning Prevention

**ALWAYS AVOID THESE COMMON CLIPPY WARNINGS THAT GET MADE REPEATEDLY:**

### 1. **await_holding_lock** (CRITICAL ERROR)
- **NEVER** use `std::sync::Mutex` in async code
- **ALWAYS** use `tokio::sync::Mutex` for async contexts
- **NEVER** hold a mutex guard across `.await` points

```rust
// ❌ WRONG - Will cause clippy warning
use std::sync::Mutex;
static TEST_MUTEX: Mutex<()> = Mutex::new(());
let _guard = TEST_MUTEX.lock().unwrap(); // Held across await
some_async_function().await;

// ✅ CORRECT - Use tokio::sync::Mutex
use tokio::sync::Mutex;
static TEST_MUTEX: Mutex<()> = Mutex::const_new(());
let _guard = TEST_MUTEX.lock().await; // Async-aware mutex
some_async_function().await;
```

### 2. **uninlined_format_args** (VERY COMMON ERROR)
- **ALWAYS** use inline format arguments
- **NEVER** use positional arguments in format! macros

```rust
// ❌ WRONG - Will cause clippy warning
let name = "test";
let id = 123;
format!("Player {}", name);
format!("ID: {}, Name: {}", id, name);
println!("Value: {}", value);

// ✅ CORRECT - Use inline arguments
format!("Player {name}");
format!("ID: {id}, Name: {name}");
println!("Value: {value}");
```

### 3. **assertions_on_constants** (USELESS CODE)
- **NEVER** use `assert!(true)` or similar constant assertions
- **ALWAYS** make meaningful assertions or remove them

```rust
// ❌ WRONG - Will cause clippy warning
assert!(true);
assert!(false);
assert_eq!(1, 1);

// ✅ CORRECT - Make meaningful assertions or remove
let result = some_function();
assert!(result.is_ok());
assert_eq!(result.unwrap(), expected_value);
// Or just verify the type without assertion:
let _: bool = result;
```

### 4. **needless_return** (STYLE ISSUE)
- **NEVER** use explicit `return` on the last expression
- **ALWAYS** use implicit returns

```rust
// ❌ WRONG
fn example() -> i32 {
    return 42;
}

// ✅ CORRECT
fn example() -> i32 {
    42
}
```

### 5. **redundant_clone** (PERFORMANCE ISSUE)
- **NEVER** clone unnecessarily
- **ALWAYS** move values when possible

```rust
// ❌ WRONG
let data = get_data();
process_data(data.clone());

// ✅ CORRECT
let data = get_data();
process_data(data);
```

### 6. **unused_mut** (CORRECTNESS ISSUE)
- **NEVER** mark variables as `mut` if they're not mutated
- **ALWAYS** remove unnecessary `mut` keywords

```rust
// ❌ WRONG
let mut value = 42; // Never mutated
println!("{}", value);

// ✅ CORRECT
let value = 42;
println!("{}", value);
```

### 7. **needless_lifetimes** (VERBOSITY ISSUE)
- **NEVER** specify lifetimes when they can be elided
- **ALWAYS** let the compiler infer lifetimes when possible

```rust
// ❌ WRONG
fn process<'a>(data: &'a str) -> &'a str {
    data
}

// ✅ CORRECT
fn process(data: &str) -> &str {
    data
}
```

### 8. **map_or_none** (EFFICIENCY ISSUE)
- **NEVER** use `.map().unwrap_or(None)` pattern
- **ALWAYS** use `.and_then()` for Option chaining

```rust
// ❌ WRONG
option.map(|x| some_function(x)).unwrap_or(None)

// ✅ CORRECT
option.and_then(|x| some_function(x))
```

### 9. **single_char_add_str** (PERFORMANCE ISSUE)
- **NEVER** use `.push_str()` with single characters
- **ALWAYS** use `.push()` for single characters

```rust
// ❌ WRONG
string.push_str("a");

// ✅ CORRECT
string.push('a');
```

### 10. **unnecessary_wraps** (API DESIGN ISSUE)
- **NEVER** return `Result<T, E>` if function never fails
- **ALWAYS** return `T` directly if no error is possible

```rust
// ❌ WRONG
fn get_constant() -> Result<i32, ()> {
    Ok(42)
}

// ✅ CORRECT
fn get_constant() -> i32 {
    42
}
```

### Async-Specific Clippy Rules

### 11. **async_yields_async** (ASYNC ISSUE)
- **NEVER** return futures from async functions unnecessarily
- **ALWAYS** await futures in async contexts

```rust
// ❌ WRONG
async fn bad_async() -> impl Future<Output = i32> {
    async { 42 }
}

// ✅ CORRECT
async fn good_async() -> i32 {
    42
}
```

### 12. **manual_async_fn** (STYLE ISSUE)
- **NEVER** manually implement async functions with Future
- **ALWAYS** use `async fn` syntax

```rust
// ❌ WRONG
fn fetch_data() -> impl Future<Output = String> {
    async { "data".to_string() }
}

// ✅ CORRECT
async fn fetch_data() -> String {
    "data".to_string()
}
```

### Testing-Specific Clippy Rules

### 13. **panic_in_result_fn** (TEST SAFETY)
- **NEVER** use `panic!` in functions returning `Result`
- **ALWAYS** return proper error types

```rust
// ❌ WRONG
fn test_function() -> Result<(), Error> {
    panic!("This should not happen");
}

// ✅ CORRECT
fn test_function() -> Result<(), Error> {
    Err(Error::new("This should not happen"))
}
```

### 14. **bool_assert_comparison** (TEST CLARITY)
- **NEVER** use `assert_eq!(value, true)` or `assert_eq!(value, false)`
- **ALWAYS** use `assert!(value)` or `assert!(!value)`

```rust
// ❌ WRONG
assert_eq!(result, true);
assert_eq!(flag, false);

// ✅ CORRECT
assert!(result);
assert!(!flag);
```

### **MANDATORY PRE-COMMIT CHECKLIST:**

Before any commit, **ALWAYS** run these commands and fix **ALL** warnings:

```bash
# 1. Format code
cargo fmt

# 2. Check for clippy warnings (MUST PASS WITH ZERO WARNINGS)
cargo clippy --all-features --all-targets -- -D warnings

# 3. Run tests
cargo test --all-features

# 4. Check for unused dependencies
cargo machete  # if available
```

### **EMERGENCY CLIPPY FIX REFERENCE:**

When clippy fails, use this quick reference:

1. **await_holding_lock**: Replace `std::sync::Mutex` → `tokio::sync::Mutex`, change `.lock().unwrap()` → `.lock().await`
2. **uninlined_format_args**: Replace `format!("{}", var)` → `format!("{var}")`
3. **assertions_on_constants**: Remove `assert!(true)` or replace with meaningful assertion
4. **needless_return**: Remove `return` from last expression
5. **unused_mut**: Remove `mut` from variables that aren't mutated
6. **redundant_clone**: Remove unnecessary `.clone()` calls

### Testing Guidelines

1. **Integration Tests** (`tests/integration_tests.rs`):
   - Test complete workflows from CLI to UI rendering
   - Use temporary directories for config testing
   - Mock external API calls with wiremock
   - Test error scenarios and edge cases

2. **Unit Tests**:
   - Each module should have comprehensive unit tests
   - Test both success and failure scenarios
   - Use `tokio::test` for async test functions
   - Mock external dependencies

3. **Test Data**:
   ```rust
   // Create realistic test data
   let mock_game = GameData {
       home_team: "HIFK".to_string(),
       away_team: "Tappara".to_string(),
       time: "18:30".to_string(),
       result: "3-2".to_string(),
       score_type: ScoreType::Final,
       is_overtime: true,
       is_shootout: false,
       serie: "runkosarja".to_string(),
       goal_events: vec![],
       played_time: 3900,
       start: "2024-01-15T18:30:00Z".to_string(),
   };
   ```

4. **CI Test Requirements**:
   - **ALWAYS ensure CI tests pass**: Before making any changes, verify that all tests pass locally
   - **Run full test suite**: Execute `cargo test --all-features` to test with all features enabled
   - **Test on different platforms**: Be aware that CI runs on Ubuntu, while local development might be on macOS
   - **Handle platform differences**: Date/time handling, file paths, and network behavior may differ between platforms
   - **Add tests for new functionality**: Every new function or feature must have corresponding tests
   - **Test error scenarios**: Include tests for edge cases, invalid inputs, and error conditions
   - **Mock external dependencies**: Use wiremock for HTTP calls and tempfile for file operations
   - **Avoid timing-dependent tests**: Tests should not depend on specific times or dates
   - **Test async functions properly**: Use `#[tokio::test]` for async test functions
   - **Verify test coverage**: Ensure new code paths are covered by tests

5. **Common CI Failure Patterns and Solutions**:
   - **Platform-specific date/time issues**: Use UTC internally, avoid local time assumptions
   - **File path differences**: Use `dirs` crate for platform-agnostic paths
   - **Network timeouts**: Implement proper timeout handling and retry logic
   - **Missing test dependencies**: Ensure all test dependencies are in `[dev-dependencies]`
   - **Async test failures**: Use `#[tokio::test]` and proper async/await patterns
   - **Timing-dependent tests**: Mock time or use deterministic test data
   - **HTTP client issues**: Use wiremock for HTTP testing, avoid real network calls
   - **Permission errors**: Use tempfile for test file operations
   - **Memory leaks**: Ensure proper resource cleanup in tests
   - **Race conditions**: Use proper synchronization in concurrent tests

### API Integration Patterns

1. **HTTP Client Usage**:
   - Always use reqwest with JSON features enabled
   - Implement proper timeout handling (default: 30 seconds)
   - Use connection pooling for performance
   - Handle rate limiting gracefully

2. **Data Processing**:
   - Transform API responses into internal models immediately
   - Validate data integrity before processing
   - Handle missing or null fields gracefully
   - Cache processed results when appropriate

3. **Error Recovery**:
   - Implement exponential backoff for retries
   - Provide fallback data when API is unavailable
   - Log detailed error information for debugging

### UI/UX Considerations

1. **Teletext Authenticity**:
   - Use exact YLE Teksti-TV color scheme (defined in constants)
   - Maintain proper character spacing and alignment
   - Implement authentic pagination behavior
   - Support both interactive and non-interactive modes

2. **Terminal Compatibility**:
   - Handle various terminal sizes gracefully
   - Support terminals without link capability
   - Provide plain text output options
   - Maintain consistent rendering across platforms

3. **User Experience**:
   - Provide immediate feedback for user actions
   - Show loading states during data fetching
   - Handle keyboard input responsively
   - Display meaningful error messages

## Common Development Tasks

### Adding New API Endpoints

1. **Define Models** (`models.rs`):
   ```rust
   #[derive(Debug, Serialize, Deserialize)]
   pub struct NewApiResponse {
       pub field1: String,
       pub field2: Option<i32>,
   }
   ```

2. **Implement API Call** (`api.rs`):
   ```rust
   pub async fn fetch_new_data(
       client: &Client,
       config: &Config,
   ) -> Result<NewApiResponse, AppError> {
       let url = format!("{}/new-endpoint", config.api_domain);
       let response = client.get(&url).send().await?;
       let data: NewApiResponse = response.json().await?;
       Ok(data)
   }
   ```

3. **Add Processing Logic** (`processors.rs`):
   ```rust
   pub fn process_new_data(raw_data: NewApiResponse) -> ProcessedData {
       // Transform and validate data
   }
   ```

### Adding New CLI Options

1. **Update Args Struct** (`main.rs`):
   ```rust
   #[derive(Parser, Debug)]
   struct Args {
       /// New option description
       #[arg(long = "new-option", help_heading = "Display Options")]
       new_option: bool,
   }
   ```

2. **Handle Option Logic**:
   ```rust
   if args.new_option {
       // Implement new functionality
   }
   ```

### Adding New UI Elements

1. **Define Row Type** (`teletext_ui.rs`):
   ```rust
   pub enum TeletextRow {
       NewRowType {
           content: String,
           style: DisplayStyle,
       },
   }
   ```

2. **Implement Rendering**:
   ```rust
   fn render_new_row_type(&self, stdout: &mut Stdout) -> Result<(), AppError> {
       // Implement rendering logic
   }
   ```

## Performance Considerations

1. **Memory Management**:
   - Use `Vec::with_capacity()` when size is known
   - Implement proper resource cleanup
   - Monitor memory usage during development

2. **Network Optimization**:
   - Implement request caching with appropriate TTL
   - Use HTTP/2 multiplexing when available
   - Batch API requests when possible

3. **Terminal Rendering**:
   - Minimize screen clears and redraws
   - Buffer output before writing to terminal
   - Use incremental updates when possible

## Dependencies Management

### Core Dependencies
- **tokio**: Async runtime with full features
- **reqwest**: HTTP client with JSON support
- **serde**: Serialization with derive features
- **crossterm**: Cross-platform terminal manipulation
- **clap**: CLI parsing with derive features
- **chrono**: Date/time handling
- **thiserror**: Error handling
- **tracing**: Structured logging

### Development Dependencies
- **tempfile**: Temporary files for testing
- **wiremock**: HTTP mocking for tests
- **tokio-test**: Async testing utilities

## Version Management

- **Current Version**: 0.8.3
- **Edition**: 2024 (Rust 2024 edition)
- **Versioning**: Follow semantic versioning
- **Release Process**: Update version in Cargo.toml, tag release, publish to crates.io

## Configuration Schema

```toml
# ~/.config/liiga_teletext/config.toml
api_domain = "https://api.example.com"
log_file_path = "/custom/log/path.log"  # Optional
```

## Logging Configuration

- **Default Location**: `~/.config/liiga_teletext/logs/liiga_teletext.log`
- **Rotation**: Daily rotation with automatic cleanup
- **Levels**: Configurable via RUST_LOG environment variable
- **Format**: Structured JSON logging with timestamps

## Contributing Guidelines

1. **Code Quality**:
   - Run `cargo fmt` before committing
   - Ensure `cargo clippy` passes without warnings
   - Write comprehensive tests for new features
   - Update documentation for public APIs

2. **Testing Requirements**:
   - **MANDATORY**: Run `cargo test --all-features` before any commit
   - **MANDATORY**: Ensure all tests pass locally before pushing changes
   - **MANDATORY**: Add tests for any new functionality or bug fixes
   - Test both success and failure scenarios
   - Mock external dependencies (HTTP calls, file operations)
   - Avoid timing-dependent or platform-specific test assumptions
   - Use `#[tokio::test]` for async test functions
   - Test error handling and edge cases thoroughly

3. **CI/CD Requirements**:
   - **ALWAYS verify CI will pass**: The CI pipeline runs on Ubuntu with `cargo test --all-features`
   - **Platform compatibility**: Ensure code works on both macOS (local) and Ubuntu (CI)
   - **Dependency management**: Be careful with platform-specific dependencies
   - **Error handling**: Implement robust error handling that works across platforms
   - **Date/time handling**: Use UTC internally, convert to local time only for display
   - **File operations**: Use platform-agnostic paths and handle permissions gracefully

4. **Commit Messages**:
   - Follow Conventional Commits specification
   - Use clear, descriptive commit messages
   - Include issue references when applicable

5. **Pull Requests**:
   - Provide detailed description of changes
   - Include test coverage for new functionality
   - Update relevant documentation
   - **MANDATORY**: Ensure CI passes all checks before requesting review
   - Include any platform-specific considerations in PR description

This guide provides the foundation for understanding and effectively working with the liiga_teletext codebase. Always refer to the actual source code for the most up-to-date implementation details.
